# -*- coding: utf-8 -*-
"""house_price_prediction.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qEWb27zGg4Od1JCzv36ostIPOaeGZYB6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('/content/train.csv')

data.head()

data.columns

data.shape

data.info()

data.describe()

missing = data.isnull().sum()
missing = missing[missing >0]
missing.sort_values(ascending=False,inplace=True)

plt.figure(figsize=(10,8))
missing.plot.bar()

#Add data values at the end of each bar
for i, value in enumerate(missing):
    plt.text(i, value+1, str(value),ha='center')

plt.show()

sns.set(rc={'figure.figsize':(10,8)})
sns.histplot(data['SalePrice'],bins=20,kde=True)

numerical_columns = data.select_dtypes(include=['number'])
numerical_columns.columns

categorical_columns = data.select_dtypes(include=['object'])
categorical_columns.columns

correlation = numerical_columns.corr()['SalePrice']
print(correlation.sort_values(ascending=False))

plt.figure(figsize=(10,8))
sns.heatmap(numerical_columns.corr(),annot=False)
plt.title('Correlation Heatmap')
plt.show()

top_correlation_with_salesprice = numerical_columns.corr()['SalePrice'].nlargest(11)

top_correlation_matrix = numerical_columns.corr().loc[top_correlation_with_salesprice.index, top_correlation_with_salesprice.index]

plt.figure(figsize=(10,8))
sns.heatmap(top_correlation_matrix,annot=True)
plt.title('Correlation Heatmap')
plt.show()

variables = ['OverallQual', 'GrLivArea', 'GarageCars', 'GarageArea', 'TotalBsmtSF',
             '1stFlrSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd']

# Create scatter plots for each variable arranged in a 2x5 grid
fig, axes = plt.subplots(2, 5, figsize=(20, 8))

for i, var in enumerate(variables):
    sns.regplot(data=data, x=var, y='SalePrice', ax=axes[i//5, i%5])
    axes[i//5, i%5].set_title(f'Scatter Plot: {var} vs SalePrice')
    axes[i//5, i%5].set_xlabel(var)
    axes[i//5, i%5].set_ylabel('SalePrice')

# Hide empty subplots if any
for i in range(len(variables), 2*5):
    fig.delaxes(axes.flatten()[i])

plt.tight_layout()
plt.show()

sns.boxplot(x=data['SalePrice'])

f, ax =plt.subplots(figsize=(16,10))
fig = sns.boxplot(x='SaleType',y='SalePrice',data=data)
fig.axis(ymin=0, ymax=800000)
xt =plt.xticks(rotation=45)

first_quartile = data['SalePrice'].quantile(.25)
third_quartile = data['SalePrice'].quantile(.75)
IQR = third_quartile - first_quartile

new_boundary = third_quartile +3*IQR

data.drop(data[data['SalePrice']>new_boundary].index, axis =0, inplace =True)

sns.boxplot(x=data['SalePrice'])

first_quartile = data['SalePrice'].quantile(.25)
third_quartile = data['SalePrice'].quantile(.75)
IQR = third_quartile - first_quartile

new_boundary = third_quartile +3*IQR

data.drop(data[data['SalePrice']>new_boundary].index, axis = 0, inplace=True)

cols_to_remove = ['BsmtFinSF1', 'LotFrontage', 'WoodDeckSF', '2ndFlrSF', 'OpenPorchSF', 'HalfBath', 'LotArea', 'BsmtFullBath', 'BsmtUnfSF', 'BedroomAbvGr', 'ScreenPorch', 'PoolArea', 'MoSold', '3SsnPorch', 'BsmtFinSF2', 'BsmtHalfBath', 'MiscVal',
                 'Id', 'LowQualFinSF', 'YrSold', 'OverallCond', 'MSSubClass', 'EnclosedPorch',
                 'KitchenAbvGr','PoolQC','MiscFeature','Alley','Fence',
                'MasVnrType','FireplaceQu','LotFrontage','GarageCars','1stFlrSF','GrLivArea','GrLivArea']

clean_data = data.drop (cols_to_remove, axis =1)

clean_data.shape